// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStore.Models;

#nullable disable

namespace OnlineStore.Migrations
{
    [DbContext(typeof(BookstoresdbContext))]
    [Migration("20230517122422_addNewField")]
    partial class addNewField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("OnlineStore.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("author_id");

                    b.Property<string>("Address")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("city");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("phone");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("state");

                    b.Property<string>("Zip")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("zip");

                    b.HasKey("AuthorId")
                        .HasName("PRIMARY");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.Property<decimal?>("Advance")
                        .HasPrecision(12)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("advance");

                    b.Property<string>("Notes")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("Price")
                        .HasPrecision(12)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price");

                    b.Property<int>("PubId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pub_id");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("published_date");

                    b.Property<int?>("Royalty")
                        .HasColumnType("int(11)")
                        .HasColumnName("royalty");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("type");

                    b.Property<int?>("YtdSales")
                        .HasColumnType("int(11)")
                        .HasColumnName("ytd_sales");

                    b.HasKey("BookId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PubId" }, "pub_id_fk");

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Bookauthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int(11)")
                        .HasColumnName("author_id");

                    b.Property<int>("BookId")
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.Property<sbyte?>("AuthorOrder")
                        .HasColumnType("tinyint(4)")
                        .HasColumnName("author_order");

                    b.Property<int?>("RoyalityPercentage")
                        .HasColumnType("int(11)")
                        .HasColumnName("royality_percentage");

                    b.HasKey("AuthorId", "BookId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BookId" }, "book_id_fk");

                    b.ToTable("bookauthor", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("job_id");

                    b.Property<string>("JobDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job_desc");

                    b.HasKey("JobId")
                        .HasName("PRIMARY");

                    b.ToTable("job", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Publisher", b =>
                {
                    b.Property<int>("PubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("pub_id");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("country");

                    b.Property<string>("PublisherName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("publisher_name");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("state");

                    b.HasKey("PubId")
                        .HasName("PRIMARY");

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Refreshtoken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("token_id");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiry_date");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_id_fk");

                    b.ToTable("refreshtoken", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleDesc")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("role_desc");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("sale_id");

                    b.Property<int>("BookId")
                        .HasColumnType("int(11)")
                        .HasColumnName("book_id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNum")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("order_num");

                    b.Property<string>("PayTerms")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("pay_terms");

                    b.Property<int>("Quantity")
                        .HasColumnType("int(11)")
                        .HasColumnName("quantity");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("store_id");

                    b.HasKey("SaleId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BookId" }, "book_id_fk2");

                    b.HasIndex(new[] { "StoreId" }, "store_id_fk1");

                    b.ToTable("sale", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Store", b =>
                {
                    b.Property<string>("StoreId")
                        .HasMaxLength(4)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("store_id");

                    b.Property<string>("City")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("city");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("state");

                    b.Property<string>("StoreAddress")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("store_address");

                    b.Property<string>("StoreName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("store_name");

                    b.Property<string>("Zip")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("zip");

                    b.HasKey("StoreId")
                        .HasName("PRIMARY");

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("user_id");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email_address");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime")
                        .HasColumnName("hire_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<int>("PubId")
                        .HasColumnType("int(11)")
                        .HasColumnName("pub_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int(11)")
                        .HasColumnName("role_id");

                    b.Property<string>("SaltPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("source");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PubId" }, "pub_id_fk1");

                    b.HasIndex(new[] { "RoleId" }, "role_id_fk");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Book", b =>
                {
                    b.HasOne("OnlineStore.Models.Publisher", "Pub")
                        .WithMany("Books")
                        .HasForeignKey("PubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pub_id_fk");

                    b.Navigation("Pub");
                });

            modelBuilder.Entity("OnlineStore.Models.Bookauthor", b =>
                {
                    b.HasOne("OnlineStore.Models.Author", "Author")
                        .WithMany("Bookauthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("author_id_fk");

                    b.HasOne("OnlineStore.Models.Book", "Book")
                        .WithMany("Bookauthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("book_id_fk");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("OnlineStore.Models.Refreshtoken", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("Refreshtokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("user_id_fk");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.Sale", b =>
                {
                    b.HasOne("OnlineStore.Models.Book", "Book")
                        .WithMany("Sales")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("book_id_fk2");

                    b.HasOne("OnlineStore.Models.Store", "Store")
                        .WithMany("Sales")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("store_id_fk1");

                    b.Navigation("Book");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.HasOne("OnlineStore.Models.Publisher", "Pub")
                        .WithMany("Users")
                        .HasForeignKey("PubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pub_id_fk1");

                    b.HasOne("OnlineStore.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("role_id_fk");

                    b.Navigation("Pub");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OnlineStore.Models.Author", b =>
                {
                    b.Navigation("Bookauthors");
                });

            modelBuilder.Entity("OnlineStore.Models.Book", b =>
                {
                    b.Navigation("Bookauthors");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("OnlineStore.Models.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineStore.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineStore.Models.Store", b =>
                {
                    b.Navigation("Sales");
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.Navigation("Refreshtokens");
                });
#pragma warning restore 612, 618
        }
    }
}
